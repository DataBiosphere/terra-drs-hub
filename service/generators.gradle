dependencies {
	implementation 'io.swagger.core.v3:swagger-annotations'
	runtimeOnly 'org.webjars.npm:swagger-ui-dist:5.17.14'
	swaggerCodegen 'io.swagger.codegen.v3:swagger-codegen-cli'

	// Versioned by Spring:
	implementation 'jakarta.validation:jakarta.validation-api'
	implementation 'org.webjars:webjars-locator-core'
}

swaggerSources {
	server {
		inputFile = file('../common/openapi.yml')
		code {
			language = 'spring'
			components = ['models', 'apis']
			additionalProperties = [
					modelPackage     : "${artifactGroup}.generated.model",
					apiPackage       : "${artifactGroup}.generated.api",
					dateLibrary      : 'java11',
					jakarta          : 'true',
					interfaceOnly    : 'true',
					useTags          : 'true',
					springBootVersion: dependencyManagement.managedVersions['org.springframework.boot:spring-boot']
			]
			rawOptions = ['--import-mappings', "VersionProperties=${artifactGroup}.config.VersionProperties"]
		}
	}

	ga4gh {
		inputFile = file('src/main/resources/vendor/data-repository-service-1.2.0.yaml')
		code(makeClientCodeClosure('io.github.ga4gh.drs', true))
	}

	bard {
		inputFile = file('src/main/resources/vendor/bard.yaml')
		code(makeClientCodeClosure('bio.terra.bard', false))
	}

	sam {
		inputFile = file('src/main/resources/vendor/sam.yaml')
		code(makeClientCodeClosure('bio.terra.sam', false))
	}
}

/**
 * Creates a closure that configures swagger code generation for a client library.
 * @param id The base package name for the generated client library
 * @param useCustomTemplates If true, use the templates in src/main/resources/swaggercodegen
 * @return The closure that configures swagger code generation
 */
def makeClientCodeClosure(String id, boolean useCustomTemplates) {
	return () -> {
		language = 'java'
		library = 'resttemplate'

		components = [
				apiDocs  : false, apiTests: false,
				modelDocs: false, modelTests: false
		]

		if (useCustomTemplates) {
			templateDir = file("${projectDir}/src/main/resources/swaggercodegen")
		}
		additionalProperties = [
				modelPackage  : "${id}.model",
				apiPackage    : "${id}.api",
				invokerPackage: "${id}.client",
				dateLibrary   : 'java11',
				jakarta       : true
		]
	}
}

Set<String> swaggerSourcePaths = [
		"${swaggerSources.server.code.outputDir}/src/main/java",
		"${swaggerSources.ga4gh.code.outputDir}/src/main/java",
		"${swaggerSources.sam.code.outputDir}/src/main/java",
		"${swaggerSources.bard.code.outputDir}/src/main/java",
]


idea.module.generatedSourceDirs = swaggerSourcePaths.collect({ file(it) })
swaggerSourcePaths.each { sourceSets.main.java.srcDir(it) }
compileJava.dependsOn tasks.generateSwaggerCode

// The lombok plugin adds an analysis step for each srcDir, but doesn't know to register
// a dependency on swagger code generation for that code, so things can't be up-to-date
afterEvaluate {
	tasks.each {
		if (it.name.startsWith('generateEffectiveLombokConfig') &&
				it.hasProperty('paths') &&
				it.paths.intersect(swaggerSourcePaths.collect({ file(it) }))) {
			it.dependsOn(generateSwaggerCode)
		}
	}
}

// see https://github.com/n0mer/gradle-git-properties
gitProperties {
	gitPropertiesName = 'rendered/version.properties'
	keys = []
	customProperty('drshub.version.gitTag', { it.describe(tags: true) })
	customProperty('drshub.version.gitHash', { it.head().abbreviatedId })
	customProperty('drshub.version.github', { "https://github.com/DataBiosphere/terra-drs-hub/tree/${it.describe(tags: true)}" })
	customProperty('drshub.version.build', version)
}
